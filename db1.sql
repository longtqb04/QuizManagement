-- Create Views
CREATE OR REPLACE VIEW LECTURER_VIEW AS
SELECT L_CITIZENID, L_FULL_NAME, L_BDATE, L_GENDER, L_ADDRESS, L_PHONE, L_EMAIL, L_FACULTY
FROM LECTURER;

CREATE OR REPLACE VIEW STUDENT_VIEW AS
SELECT STUDENTID, FULL_NAME, BDATE, GENDER, ADDRESS, PHONE, EMAIL, FACULTY
FROM STUDENT;

-- Procedure to add new students
CREATE OR REPLACE PROCEDURE INSERT_STUDENT (
    STUDENTID IN STUDENT_VIEW.STUDENTID%TYPE,
    FULL_NAME IN STUDENT_VIEW.FULL_NAME%TYPE,
    BDATE     IN STUDENT_VIEW.BDATE%TYPE,
    GENDER    IN STUDENT_VIEW.GENDER%TYPE,
    ADDRESS   IN STUDENT_VIEW.ADDRESS%TYPE,
    PHONE     IN STUDENT_VIEW.PHONE%TYPE,
    EMAIL     IN STUDENT_VIEW.EMAIL%TYPE,
    FACULTY   IN STUDENT_VIEW.FACULTY%TYPE
)
AS
BEGIN
    INSERT INTO STUDENT_VIEW
    VALUES (STUDENTID, FULL_NAME, BDATE, GENDER, ADDRESS, PHONE, EMAIL, FACULTY);
END INSERT_STUDENT;
/
-- Trigger to check students' constraints
CREATE OR REPLACE TRIGGER CHECK_INSERT_STUDENT
BEFORE INSERT ON STUDENT
FOR EACH ROW
BEGIN
    IF (regexp_like(:NEW.STUDENTID, '[[:alpha:]*!?@#$&+()/]')) THEN 
        raise_application_error(-20000, 'STUDENT ID CAN ONLY CONTAIN NUMBERS');
    END IF;

    IF (regexp_like(:NEW.FULL_NAME, '[0123456789*!?@#$&+()/]')) THEN
        raise_application_error(-20000, 'FULL NAME CANNOT CONTAIN NUMBERS OR SPECIAL CHARACTERS');
    END IF;

    IF (:NEW.GENDER != 'M' AND :NEW.GENDER != 'F') THEN
        raise_application_error(-20000, 'GENDER MUST BE M OR F');
    END IF;
    
    IF (regexp_like(:NEW.PHONE,'[[:alpha:] *!?@#$&+()/]')) THEN 
        raise_application_error(-20000, 'INVALID PHONE NUMBER');
    END IF;
END;
/

--Trigger to add lecturers 
CREATE OR REPLACE PROCEDURE INSERT_LECTURER (
	L_CITIZENID IN LECTURER_VIEW.L_CITIZENID%TYPE,
	L_FULL_NAME IN LECTURER_VIEW.L_FULL_NAME%TYPE,
	L_BDATE     IN LECTURER_VIEW.L_BDATE%TYPE,
	L_GENDER    IN LECTURER_VIEW.L_GENDER%TYPE,
	L_ADDRESS   IN LECTURER_VIEW.L_ADDRESS%TYPE,
	L_PHONE     IN LECTURER_VIEW.L_PHONE%TYPE,
	L_EMAIL     IN LECTURER_VIEW.L_EMAIL%TYPE,
	L_FACULTY   IN LECTURER_VIEW.L_FACULTY%TYPE
)
AS
BEGIN
	INSERT INTO LECTURER_VIEW
	VALUES (L_CITIZENID, L_FULL_NAME, L_BDATE, L_GENDER, L_ADDRESS, L_PHONE, L_EMAIL, L_FACULTY);
END INSERT_LECTURER;
/

-- Trigger to check constraints
CREATE OR REPLACE TRIGGER CHECK_INSERT_LECTURER
BEFORE INSERT ON LECTURER
FOR EACH ROW
BEGIN
	IF (regexp_like(:NEW.L_CITIZENID,'[[:alpha:] *!?@#$&+()/]')) THEN 
    raise_application_error(-20000,'CITIZEN ID CAN ONLY CONTAIN NUMBERS');
    END IF;

    IF (regexp_like(:NEW.L_FULL_NAME, '[0123456789*!?@#$&+()/]')) THEN
    raise_application_error(-20000,'FULL NAME CANNOT CONTAIN NUMBERS OR SPECIAL CHARACTERS');
    END IF;
    
    IF(:NEW.L_GENDER != 'M' AND :NEW.L_GENDER !='F') THEN
    raise_application_error(-20000,'GENDER MUST BE M OR F');
    END IF;
    
    IF (regexp_like(:NEW.L_PHONE,'[[:alpha:] *!?@#$&+()/]')) THEN 
    raise_application_error(-20000,'INVALID PHONE NUMBER');
    END IF;
END;
/

-- Creating triggers to update students' and lecturers' information
CREATE OR REPLACE TRIGGER CHECK_UPDATE_STUDENT
BEFORE UPDATE ON STUDENT
FOR EACH ROW
BEGIN
	IF (regexp_like(:NEW.STUDENTID,'[[:alpha:] *!?@#$&+()/]')) THEN 
    raise_application_error(-20000,'STUDENT ID CAN ONLY CONTAIN NUMBERS');
    END IF;

    IF (regexp_like(:NEW.FULL_NAME, '[0123456789*!?@#$&+()/]')) THEN
    raise_application_error(-20000,'FULL NAME CANNOT CONTAIN NUMBERS OR SPECIAL CHARACTERS');
    END IF;
    
    IF(:NEW.GENDER != 'M' AND :NEW.GENDER != 'F') THEN
    raise_application_error(-20000,'GENDER MUST BE M OR F');
    END IF;

    IF (regexp_like(:NEW.PHONE,'[[:alpha:] *!?@#$&+()/]')) THEN 
    raise_application_error(-20000,'INVALID PHONE NUMBER');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER CHECK_UPDATE_LECTURER
BEFORE UPDATE ON LECTURER
FOR EACH ROW
BEGIN
    IF (regexp_like(:NEW.L_CITIZENID,'[[:alpha:] *!?@#$&+()/]')) THEN 
    raise_application_error(-20000,'CITIZEN ID CAN ONLY CONTAIN NUMBERS');
    END IF;

    IF (regexp_like(:NEW.L_FULL_NAME, '[0123456789*!?@#$&+()/]')) THEN
    raise_application_error(-20000,'FULL NAME CANNOT CONTAIN NUMBERS OR SPECIAL CHARACTERS');
    END IF;
    
    IF(:NEW.L_GENDER != 'M' AND :NEW.L_GENDER !='F') THEN
    raise_application_error(-20000,'GENDER MUST BE M OR F');
    END IF;
    
    IF (regexp_like(:NEW.L_PHONE,'[[:alpha:] *!?@#$&+()/]')) THEN 
    raise_application_error(-20000,'INVALID PHONE NUMBER');
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE ADD_SCORES (
    nSTUDENT_ID IN SCORES.STUDENT_ID%TYPE,
    nQUIZ_ID    IN SCORES.QUIZ_ID%TYPE,
    nQUESTIONS  IN SCORES.QUESTIONS%TYPE,
    nCORRECT    IN SCORES.CORRECT%TYPE
)
AS
BEGIN
    INSERT INTO SCORES (STUDENT_ID, QUIZ_ID, QUESTIONS, CORRECT, SCORE)
    VALUES (nSTUDENT_ID, nQUIZ_ID, nQUESTIONS, nCORRECT, ROUND(nCORRECT / nQUESTIONS * 10, 2));
END ADD_SCORES;
/

CREATE OR REPLACE TRIGGER CHECK_SCORES
BEFORE INSERT ON SCORES
FOR EACH ROW
BEGIN
    IF (:NEW.CORRECT < 0 OR :NEW.CORRECT > :NEW.QUESTIONS) THEN
        raise_application_error(-20000,'CORRECT ANSWERS MUST BE BETWEEN 0 AND NUMBER OF QUESTIONS');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER CHECK_SCORES_UPDATE
BEFORE UPDATE ON SCORES
FOR EACH ROW
BEGIN
    IF (:NEW.CORRECT < 0 OR :NEW.CORRECT > :NEW.QUESTIONS) THEN
        raise_application_error(-20000,'CORRECT ANSWERS MUST BE BETWEEN 0 AND NUMBER OF QUESTIONS');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER CALCULATE_SCORE
BEFORE UPDATE ON SCORES
FOR EACH ROW
BEGIN
    :NEW.SCORE := ROUND((:NEW.CORRECT / :NEW.QUESTIONS) * 10, 2);
END;
/

CREATE OR REPLACE PROCEDURE INSERT_QUIZ (
	QUIZ_ID    IN QUIZZES.QUIZ_ID%TYPE,
	START_TIME IN QUIZZES.START_TIME%TYPE,
	END_TIME   IN QUIZZES.END_TIME%TYPE,
	TIME_LIMIT IN QUIZZES.TIME_LIMIT%TYPE,
	QUESTIONS  IN QUIZZES.QUESTIONS%TYPE
)
AS
BEGIN
	INSERT INTO QUIZZES
	VALUES (QUIZ_ID, START_TIME, END_TIME, TIME_LIMIT, QUESTIONS);
END INSERT_QUIZ;
/

-- Creating triggers to add quizzes' information
CREATE OR REPLACE TRIGGER CHECK_INSERT_QUIZ
BEFORE INSERT ON QUIZZES
FOR EACH ROW
BEGIN
    IF (NOT regexp_like(:NEW.QUIZ_ID, '^\d+$')) THEN 
        raise_application_error(-20000, 'QUIZ ID CAN ONLY CONTAIN NUMBERS');
    END IF;

    IF (:NEW.END_TIME <= :NEW.START_TIME) THEN
        raise_application_error(-20000, 'END DATE MUST BE AFTER START DATE');
    END IF;

    IF (:NEW.TIME_LIMIT < 0) THEN
        raise_application_error(-20000, 'TIME LIMIT MUST BE POSITIVE');
    END IF;

    IF (:NEW.QUESTIONS <= 0) THEN
        raise_application_error(-20000, 'QUIZZES MUST HAVE AT LEAST ONE QUESTION');
    END IF;
END;
/
-- Creating triggers to update quizzes' information
CREATE OR REPLACE TRIGGER CHECK_UPDATE_QUIZ
BEFORE UPDATE ON QUIZZES
FOR EACH ROW
BEGIN
    IF (NOT regexp_like(:NEW.QUIZ_ID, '^\d+$')) THEN 
    raise_application_error(-20000, 'QUIZ ID CAN ONLY CONTAIN NUMBERS');
    END IF;

    IF (:NEW.END_TIME <= :NEW.START_TIME) THEN
    raise_application_error(-20000, 'END DATE MUST BE AFTER START DATE');
    END IF;

    IF (:NEW.TIME_LIMIT < 0) THEN
    raise_application_error(-20000, 'TIME LIMIT MUST BE POSITIVE');
    END IF;

    IF (:NEW.QUESTIONS <= 0) THEN
    raise_application_error(-20000, 'QUIZZES MUST HAVE AT LEAST ONE QUESTION');
    END IF;
END;
/
-- Procedure to add questions
CREATE OR REPLACE PROCEDURE ADD_QUESTION (
    QUIZ_ID     IN QUESTIONS.QUIZ_ID%TYPE,
    QUESTION_ID IN QUESTIONS.QUESTION_ID%TYPE,
    QUESTION    IN QUESTIONS.QUESTION%TYPE,
    ANSWER_A    IN QUESTIONS.ANSWER_A%TYPE,
    ANSWER_B    IN QUESTIONS.ANSWER_B%TYPE,
    ANSWER_C    IN QUESTIONS.ANSWER_C%TYPE,
    ANSWER_D    IN QUESTIONS.ANSWER_D%TYPE,
    ANSWER_E    IN QUESTIONS.ANSWER_E%TYPE,
    CORRECT     IN QUESTIONS.CORRECT%TYPE
)
AS
BEGIN
    INSERT INTO QUESTIONS
    VALUES (QUIZ_ID, QUESTION_ID, QUESTION, ANSWER_A, ANSWER_B, ANSWER_C, ANSWER_D, ANSWER_E, CORRECT);
END ADD_QUESTION;
/
-- Trigger for adding/updating questions
CREATE OR REPLACE TRIGGER CHECK_ADD_QUESTION
BEFORE INSERT ON QUESTIONS
FOR EACH ROW
BEGIN
    IF (NOT regexp_like(:NEW.QUESTION_ID, '^\d+$')) THEN 
    raise_application_error(-20000, 'QUESTION ID CAN ONLY CONTAIN NUMBERS');
    END IF;
    
    IF (:NEW.CORRECT != 'A' AND :NEW.CORRECT != 'B' AND :NEW.CORRECT != 'C' AND :NEW.CORRECT != 'D' AND :NEW.CORRECT != 'E') THEN
    raise_application_error(-20000, 'CORRECT ANSWER MUST BE BETWEEN A AND E');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER CHECK_UPDATE_QUESTION
BEFORE UPDATE ON QUESTIONS
FOR EACH ROW
BEGIN
    IF (NOT regexp_like(:NEW.QUESTION_ID, '^\d+$')) THEN 
    raise_application_error(-20000, 'QUESTION ID CAN ONLY CONTAIN NUMBERS');
    END IF;
    
    IF (:NEW.CORRECT != 'A' AND :NEW.CORRECT != 'B' AND :NEW.CORRECT != 'C' AND :NEW.CORRECT != 'D' AND :NEW.CORRECT != 'E') THEN
    raise_application_error(-20000, 'CORRECT ANSWER MUST BE BETWEEN A AND E');
    END IF;
END;
/

-- Function to calculate total of students
CREATE OR REPLACE FUNCTION SUMOFSTUDENTS
RETURN INT
AS
    SUM_STUDENTS INT;
BEGIN
    SELECT COUNT(*) INTO SUM_STUDENTS
    FROM STUDENT;
    
    RETURN SUM_STUDENTS;
END;
/
CREATE OR REPLACE FUNCTION SUMSTUDENTSFACULTY (FACULTYNAME IN STUDENT.FACULTY%TYPE)
RETURN INT
AS
    SUM_STUDENTS INT;
BEGIN
    SELECT COUNT(*) INTO SUM_STUDENTS
    FROM STUDENT
    WHERE FACULTY = FACULTYNAME;
    
    RETURN SUM_STUDENTS;
END;
/

-- Function to calculate total of lecturers
CREATE OR REPLACE FUNCTION SUMOFLECTURERS
RETURN INT
AS
    SUM_LECTURERS INT;
BEGIN
    SELECT COUNT(*) INTO SUM_LECTURERS
    FROM LECTURER;
    
    RETURN SUM_LECTURERS;
END;
/
CREATE OR REPLACE FUNCTION SUMLECTURERSFACULTY (FACULTYNAME IN LECTURER.L_FACULTY%TYPE)
RETURN INT
AS
    SUM_LECTURERS INT;
BEGIN
    SELECT COUNT(*) INTO SUM_LECTURERS
    FROM LECTURER
    WHERE L_FACULTY = FACULTYNAME;
    
    RETURN SUM_LECTURERS;
END;
/
CREATE OR REPLACE TRIGGER VALIDATE_QUESTION_COUNT
BEFORE INSERT OR UPDATE ON QUESTIONS
FOR EACH ROW
DECLARE
    MAX_QUESTIONS INT;
    CURRENT_COUNT INT;
BEGIN
    SELECT QUESTIONS INTO MAX_QUESTIONS
    FROM QUIZZES
    WHERE QUIZ_ID = :NEW.QUIZ_ID;

    SELECT COUNT(*) INTO CURRENT_COUNT
    FROM QUESTIONS
    WHERE QUIZ_ID = :NEW.QUIZ_ID;
    
    IF (CURRENT_COUNT + 1 > MAX_QUESTIONS) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Exceeding the allowed number of questions for this quiz.');
    END IF;
END;
